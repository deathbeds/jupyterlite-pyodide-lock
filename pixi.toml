"$schema" = "https://pixi.sh/v0.39.3/schema/manifest/schema.json"

[project]
name = "jlpl"
channels = [
  "conda-forge",
  "conda-forge/label/jupyterlite_core_alpha",
  "conda-forge/label/jupyterlite_pyodide_kernel_alpha",
]
platforms = ["linux-64", "osx-64", "win-64", "osx-arm64"]

[tasks]
# top-level tasks a la make phony
all = {description = """
ALL tasks to prepare for a release""", depends-on = [
  "fix",
  "lint",
  "build",
  "docs",
  "check",
  "test-all",
], cmd = "echo 🚢"}
test-all = {description = """
🚀 run ALL tests""", depends-on = ["test", "test-min", "test-next"], cmd = "echo 🚀"}
fix = {description = """
🧹 fix ALL source files""", cmd = "echo 🧹", depends-on = [
  "fix-tasks",
  "fix-deps",
  "fix-ruff",
  "fix-taplo",
  "fix-ipynb",
]}
lint = {description = """
⭐ run ALL linters""", cmd = "echo ⭐", depends-on = [
  "lint-ruff",
  "lint-ipynb",
  "lint-actionlint",
]}
build = {description = """
🏗️  build ALL packages""", cmd = "echo 🏗️", depends-on = [
  "build-pypi-core",
  "build-pypi-wd",
]}
test = {cmd = "echo 🧪", depends-on = ["test-max-cli", "test-max-core", "test-max-wd"]}
test-min = {cmd = "echo 🧪", depends-on = [
  "test-min-cli",
  "test-min-core",
  "test-min-wd",
]}
test-next = {cmd = "echo 🧪", depends-on = [
  "test-next-cli",
  "test-next-core",
  "test-next-wd",
]}
docs = {cmd = "echo 🖨️", depends-on = ["docs-lite", "docs-sphinx"]}
check = {cmd = "echo 🤓", depends-on = ["check-links"]}

# tasks that are customized per env
pip-- = """rm -rf build/pip-freeze/$PIXI_ENVIRONMENT_NAME.txt
  && python -m pip install
    -vv
    --no-deps
    --no-build-isolation
    --disable-pip-version-check
    --ignore-installed"""
pip-check-- = """python -m pip check
  && mkdir -p build/pip-freeze
  && python -m pip list --format=freeze
  > build/pip-freeze/$PIXI_ENVIRONMENT_NAME.txt"""

pip-e-all-- = """
  pixi r pip-check-- && pixi r pip-e-core-- && pixi r pip-e-wd-- && pixi r pip-check--
"""
pip-e-core-- = """pixi r pip-- -e ."""
pip-e-wd-- = """cd contrib/jupyterlite-pyodide-lock-webdriver && pixi r pip-- -e ."""

pip-whl-all-- = """
  pixi r pip-check-- && pixi r pip-whl-core-- && pixi r pip-whl-wd-- && pixi r pip-check--
"""
pip-whl-core-- = """pixi r pip--
  jupyterlite-pyodide-lock
  --find-links=dist
  --no-index"""
pip-whl-wd-- = """pixi r pip--
  jupyterlite-pyodide-lock-webdriver
  --find-links=contrib/jupyterlite-pyodide-lock-webdriver/dist
  --no-index"""

# real tasks
[feature.tasks-lint.tasks.fix-deps]
description = "├ fix dependencies"
cmd = """
  python _scripts/fix-deps.py
    pyproject.toml
    contrib/jupyterlite-pyodide-lock-webdriver/pyproject.toml"""
inputs = ["pyproject.toml", "_scripts/fix-deps.py"]
outputs = ["contrib/*/pyproject.toml"]

[feature.tasks-lint.tasks.fix-tasks]
description = "├ fix pixi tasks"
cmd = "python _scripts/fix-tasks.py"
inputs = ["pixi.toml", "_scripts/fix-tasks.py"]

[feature.tasks-lint.tasks.fix-ipynb]
description = "├ fix notebooks"
cmd = "python _scripts/nb-lint.py --fix docs"
inputs = ["_scripts/nb-lint.py", "docs/**/*.ipynb", "!**/.*"]

[feature.tasks-lint.tasks.lint-ipynb]
description = "├ check notebooks"
cmd = "python _scripts/nb-lint.py docs"
inputs = ["_scripts/nb-lint.py", "docs/**/*.ipynb", "!**/.*"]

[feature.tasks-lint.tasks.fix-ruff]
description = "├ fix python with ruff"
cmd = "ruff check --fix-only && ruff format"
depends-on = ["fix-conftest"]
inputs = [
  "{_scripts,src,tests,docs,contrib}/**/*.{ipynb,py}",
  "pyproject.toml",
  "!**/.*",
]

[feature.tasks-lint.tasks.lint-ruff]
description = "├ check python with ruff"
cmd = "ruff check && ruff format --check"
inputs = [
  "{_scripts,src,tests,docs,contrib}/**/*.{ipynb,py}",
  "pyproject.toml",
  "!**/.*",
]

[feature.tasks-lint.tasks.fix-taplo]
description = "├ fix toml with taplo"
cmd = """
  taplo fmt
    --option=array_auto_collapse=false
    --option=array_auto_expand=true
    --option=compact_inline_tables=true
    --option=column_width=88
    --option=indent_string="  "
    pyproject.toml
    pixi.toml
    contrib/*/pyproject.toml"""
depends-on = ["fix-deps"]
inputs = ["*.toml", "contrib/*/*.toml", "!**/.*"]

[feature.tasks-lint.tasks.fix-conftest]
description = "├ add templated conftest"
depends-on = ["fix-deps"]
inputs = ["tests/conftest.py", "_scripts/replace-between.py"]
outputs = ["contrib/jupyterlite-pyodide-lock-webdriver/tests/conftest.py"]
cmd = """
  python _scripts/replace-between.py
    tests/conftest.py
    contrib/jupyterlite-pyodide-lock-webdriver/tests/conftest.py
    "### shared fixtures ###" """

[feature.tasks-lint.tasks.lint-actionlint]
description = "├ check GitHub actions with actionlint"
cmd = "actionlint -shellcheck=shellcheck -pyflakes=pyflakes"
inputs = [".github/workflows"]

# building #####################################################################
[feature.tasks-build.tasks.build-licenses]
description = "├ ensure licenses in contrib packages"
cmd = "cp LICENSE contrib/jupyterlite-pyodide-lock-webdriver/LICENSE"
inputs = ["LICENSE"]
outputs = ["contrib/jupyterlite-pyodide-lock-webdriver/LICENSE"]

[feature.tasks-build.tasks.build-pypi-core]
description = "├ build core PyPI distributions"
cmd = """rm -rf dist/jupyterlite_pyodide_lock-*
  && pyproject-build . --no-isolation -vv"""
inputs = ["{LICENSE,pyproject.toml,README.md}", "src/**/*.{py,j2}"]
outputs = ["dist/jupyterlite_pyodide_lock-*.{tar.gz,whl}"]

[feature.tasks-build.tasks.build-pypi-wd]
description = "├ build webdriver PyPI distributions"
cmd = """mkdir -p dist
  && rm -rf dist/jupyterlite_pyodide_lock_webdriver-
  && cd contrib/jupyterlite-pyodide-lock-webdriver
  && pyproject-build . --no-isolation -vv
  && cp dist/* $PIXI_PROJECT_ROOT/dist"""
depends-on = ["build-licenses"]
inputs = [
  "contrib/jupyterlite-pyodide-lock-webdriver/{LICENSE,pyproject.toml,README.md}",
  "contrib/jupyterlite-pyodide-lock-webdriver/src/**/*.py",
]
outputs = [
  "dist/jupyterlite_pyodide_lock_webdriver-*.{tar.gz,whl}",
]

# testing patterns #############################################################
[tasks.pytest--]
cmd = """export TEST_JLPL_REPORTS=$PIXI_PROJECT_ROOT/build/reports/$PIXI_ENVIRONMENT_NAME/$TEST_JLPL_PKG
  && export COVERAGE_FILE=$TEST_JLPL_REPORTS/.coverage
  && rm -rf $TEST_JLPL_REPORTS
  && mkdir -p $TEST_JLPL_REPORTS
  && cd $TEST_JLPL_CWD
  && pytest
    -o cache_dir=$PIXI_PROJECT_ROOT/build/.cache/$TEST_JLPL_PKG/pytest
    --cov-branch
    --cov-context=test
    --cov-report=html:$TEST_JLPL_REPORTS/htmlcov
    --cov-report=term-missing:skip-covered
    --cov=$TEST_JLPL_MOD
    --html=$TEST_JLPL_REPORTS/pytest.html --self-contained-html
    --no-cov-on-fail
"""
[tasks.pytest-core--]
cmd = """export TEST_JLPL_PKG=jupyterlite-pyodide-lock
  && export TEST_JLPL_MOD=jupyterlite_pyodide_lock
  && export TEST_JLPL_CWD=.
  && pixi r pytest--"""
[tasks.pytest-wd--]
cmd = """export TEST_JLPL_PKG=jupyterlite-pyodide-lock-webdriver
  && export TEST_JLPL_MOD=jupyterlite_pyodide_lock_webdriver
  && export TEST_JLPL_CWD=contrib/jupyterlite-pyodide-lock-webdriver
  && pixi r pytest--"""

# testing default ##############################################################
[feature.tasks-test-max.tasks.test-max-pip]
description = "├ prepare the default test environment with pip"
cmd = "pixi r -e test-max pip-whl-all--"
depends-on = ["build"]
inputs = ["dist/*.whl"]
outputs = ["build/pip-freeze/test.txt"]

[feature.tasks-test-max.tasks.test-max-cli]
description = "├ smoke test browsers in default test environment"
cmd = """jupyter-pyodide-lock browsers"""
depends-on = ["test-max-pip"]
inputs = ["build/pip-freeze/test.txt"]

[feature.tasks-test-max.tasks.test-max-core]
description = "├ test core in the default test environment"
cmd = "pixi r -e test-max pytest-core--"
depends-on = ["test-max-pip", "test-max-cli"]
inputs = ["pyproject.toml", "tests/**/*.py", "dist/*.whl"]
outputs = [
  "build/reports/test-max/jupyterlite-pyodide-lock/{pytest.html,htmlcov/status.json}",
]

[feature.tasks-test-max.tasks.test-max-wd]
description = "├ test webdriver in the default test environment"
depends-on = ["test-max-pip", "test-max-cli"]
cmd = "pixi r -e test-max pytest-wd--"
inputs = [
  "contrib/jupyterlite-pyodide-lock-webdriver/pyproject.toml",
  "contrib/jupyterlite-pyodide-lock-webdriver/tests/**/*.py",
  "dist/*.whl",
]
outputs = [
  "build/reports/test-max/jupyterlite-pyodide-lock-webdriver/{pytest.html,htmlcov/status.json}",
]

# oldest supported testing #####################################################
[feature.tasks-test-min.tasks.test-min-pip]
description = "├ prepare the min test environment with pip"
cmd = "pixi r -e test-min pip-whl-all--"
depends-on = ["build"]
inputs = ["dist/*.whl"]
outputs = ["build/pip-freeze/test.txt"]

[feature.tasks-test-min.tasks.test-min-cli]
description = "├ smoke test browsers in min test environment"
cmd = "jupyter-pyodide-lock browsers"
depends-on = ["test-min-pip"]
inputs = ["build/pip-freeze/test.txt"]

[feature.tasks-test-min.tasks.test-min-core]
description = "├ test core in the min test environment"
cmd = "pixi r -e test-min pytest-core--"
depends-on = ["test-min-pip", "test-min-cli"]
inputs = ["pyproject.toml", "tests/**/*.py", "dist/*.whl"]
outputs = [
  "build/reports/test-min/jupyterlite-pyodide-lock/{pytest.html,htmlcov/status.json}",
]

[feature.tasks-test-min.tasks.test-min-wd]
description = "├ test webdriver in the min test environment"
depends-on = ["test-min-pip", "test-min-cli"]
cmd = "pixi r -e test-min pytest-wd--"
inputs = [
  "contrib/jupyterlite-pyodide-lock-webdriver/pyproject.toml",
  "contrib/jupyterlite-pyodide-lock-webdriver/tests/**/*.py",
  "dist/*.whl",
]
outputs = [
  "build/reports/test-min/jupyterlite-pyodide-lock-webdriver/{pytest.html,htmlcov/status.json}",
]

# prerelease testing ###########################################################
[feature.tasks-test-next.tasks.test-next-pip]
description = "├ prepare the next test environment with pip"
cmd = "pixi r -e test-next pip-whl-all--"
depends-on = ["build"]
inputs = ["dist/*.whl"]
outputs = ["build/pip-freeze/test.txt"]

[feature.tasks-test-next.tasks.test-next-cli]
description = "├ smoke test browsers in next test environment"
cmd = "jupyter-pyodide-lock browsers"
depends-on = ["test-next-pip"]
inputs = ["build/pip-freeze/test.txt"]

[feature.tasks-test-next.tasks.test-next-core]
description = "├ test core in the next test environment"
cmd = "pixi r -e test-next pytest-core--"
depends-on = ["test-next-pip", "test-next-cli"]
inputs = ["pyproject.toml", "tests/**/*.py", "dist/*.whl"]
outputs = [
  "build/reports/test-next/jupyterlite-pyodide-lock/{pytest.html,htmlcov/status.json}",
]

[feature.tasks-test-next.tasks.test-next-wd]
description = "├ test webdriver in the next test environment"
depends-on = ["test-next-pip", "test-next-cli"]
cmd = "pixi r -e test-next pytest-wd--"
inputs = [
  "contrib/jupyterlite-pyodide-lock-webdriver/pyproject.toml",
  "contrib/jupyterlite-pyodide-lock-webdriver/tests/**/*.py",
  "dist/*.whl",
]
outputs = [
  "build/reports/test-next/jupyterlite-pyodide-lock-webdriver/{pytest.html,htmlcov/status.json}",
]

# docs #########################################################################
[feature.tasks-docs.tasks.docs-pip]
description = "├ prepare the docs environment with pip"
cmd = "pixi r -e docs pip-whl-all--"
depends-on = ["build"]
inputs = ["dist/*.whl"]
outputs = ["build/pip-freeze/docs.txt"]

[feature.tasks-docs.tasks.docs-lite]
description = "├ build a demo site with jupyter-lite"
cmd = """cd examples
  && jupyter-lite doit --debug -- pre_archive:report:SHA256SUMS"""
depends-on = ["docs-pip"]
inputs = ["examples", "src/**/*.py", "!**/.*"]
outputs = ["build/docs-app/SHA256SUMS"]

[feature.tasks-docs.tasks.docs-sphinx]
description = "├ build documentation with sphinx"
cmd = """cd docs
  && export PYDEVD_DISABLE_FILE_VALIDATION=1
  && sphinx-build -W --keep-going --color -b html . ../build/docs"""
depends-on = ["docs-lite"]
inputs = [
  "*.md",
  "build/docs-app/SHA256SUMS",
  "dist/*.whl",
  "docs/**/*.{css,ipynb,md,py}",
  "!**/.*",
]
outputs = ["build/docs/.buildinfo"]

[feature.tasks-docs.tasks.docs-rtd]
description = "├ copy the documentation site to where ReadTheDocs wants it"
cmd = """python -c "
import os;
assert all(map(os.getenv, ['READTHEDOCS', 'READTHEDOCS_OUTPUT'])), 'not on ReadTheDocs'
"
  && mkdir -p "$READTHEDOCS_OUTPUT"
  && cp -r build/docs "$READTHEDOCS_OUTPUT/html"
  && ls "$READTHEDOCS_OUTPUT/html"
"""
depends-on = ["docs-sphinx"]

# checking
[feature.tasks-check.tasks.check-links]
cmd = """
  rm -rf build/reports/check-links
  && mkdir -p build/reports/check-links
  && cd build/reports/check-links
  && touch pytest.ini
  && pytest
    -c pytest.ini
    --rootdir=.
    -p no:importnb
    --check-links
    --check-links-ignore '^https?://'
    -k "not _modules/index.html"
    ../../docs/**/*.html
"""
depends-on = ["docs-sphinx"]
inputs = ["build/docs/**/*.html"]

[feature.tasks-check.tasks.check-spelling]
cmd = "python _scripts/check-spelling.py"
depends-on = ["docs-sphinx"]
inputs = ["build/docs/**/*.html", "_scripts/check-spelling.py"]

# interactive development ######################################################
[feature.tasks-dev.tasks.dev-pip]
cmd = """pixi r -e dev pip-e-all--"""
outputs = ["build/pip-freeze/dev.txt"]

[feature.tasks-dev.tasks.lab]
cmd = """jupyter lab --no-browser --debug"""
depends-on = ["dev-pip"]

# dependencies #################################################################
[feature.deps-run.dependencies]
jupyterlite-core = ">=0.3.0,<0.6.0"
jupyterlite-pyodide-kernel = ">=0.3.1,<0.6.0"
psutil = ">=6"
pyodide-lock = ">=0.1.0a4,<0.1.0b0"
pyodide-lock-with-wheel = "*"
python = ">=3.10,<3.14"
tornado = ">=6.1.0"

[feature.deps-run-min.dependencies]
jupyterlite-core = "0.3.0"
jupyterlite-pyodide-kernel = "0.3.1"
psutil = "6.0.*"
pyodide-lock = "0.1.0a4"
python = "3.10.*"

[feature.deps-run-max.dependencies]
python = "3.13.*"
pyodide-lock = "0.1.0a8"
jupyterlite-core = "0.4.*"
jupyterlite-pyodide-kernel = "0.4.*"

[feature.deps-run-next.dependencies]
python = "3.13.*"
pyodide-lock = "0.1.0a6"

[feature.deps-run-next.dependencies.jupyterlite-core]
version = ">=0.5.0a2"
channel = "conda-forge/label/jupyterlite_core_alpha"

[feature.deps-run-next.dependencies.jupyterlite-pyodide-kernel]
version = ">=0.5.0a1"
channel = "conda-forge/label/jupyterlite_pyodide_kernel_alpha"

[feature.deps-pip.dependencies]
pip = "*"
flit-core = ">=3.9,<4.0"

[feature.deps-build.dependencies]
python-build = "*"
flit-core = ">=3.9,<4.0"

[feature.deps-lint.dependencies]
actionlint-with-all = "*"
ruff = "*"
taplo = "*"
nbformat = "*"
tomli-w = "*"
tomlkit = "*"

[feature.deps-test.dependencies]
pytest = ">=8,<9"
pytest-cov = "*"
pytest-html = "*"

[feature.deps-webdriver.dependencies]
selenium = ">=4.19"

[feature.deps-webdriver-min.dependencies]
selenium = "4.19.*"

[feature.deps-firefox.dependencies]
firefox = "*"
geckodriver = "*"

[feature.deps-firefox-min.dependencies]
firefox = "128.*"

[feature.deps-docs.dependencies]
autodoc-traits = ">=1.2.2"
myst-nb = "*"
pydata-sphinx-theme = "*"
sphinx = "*"
sphinx-autodoc-typehints = "*"
sphinx-copybutton = "*"
python-libarchive-c = "*"
importnb = "*"
requests = "*"
jinja2 = ">=2.9"
packaging = "*"

[feature.deps-check.dependencies]
pytest-check-links = "*"

[feature.deps-demo.dependencies]
ipywidgets = ">=8.1,<8.2"
jupyterlab = ">=4.1,<4.4"

# environments #################################################################
[environments]
lint = {features = ["deps-lint", "tasks-lint"]}
build = {features = ["deps-build", "tasks-build"]}
docs = {features = [
  "deps-build",
  "deps-check",
  "deps-demo",
  "deps-docs",
  "deps-firefox",
  "deps-pip",
  "deps-run",
  "deps-webdriver",
  "tasks-check",
  "tasks-docs",
]}
test-max = {features = [
  "deps-pip",
  "deps-firefox",
  "deps-run-max",
  "deps-run",
  "deps-test",
  "deps-webdriver",
  "tasks-test-max",
]}
test-min = {features = [
  "deps-pip",
  "deps-firefox-min",
  "deps-firefox",
  "deps-run-min",
  "deps-run",
  "deps-test",
  "deps-webdriver-min",
  "deps-webdriver",
  "tasks-test-min",
]}
test-next = {features = [
  "deps-pip",
  "deps-firefox",
  "deps-run-next",
  "deps-run",
  "deps-test",
  "deps-webdriver",
  "tasks-test-next",
]}
dev = {features = [
  "deps-demo",
  "deps-pip",
  "deps-docs",
  "deps-lint",
  "deps-build",
  "deps-run",
  "deps-test",
  "deps-webdriver",
  "tasks-dev",
]}
