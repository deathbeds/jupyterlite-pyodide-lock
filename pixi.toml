"$schema" = "https://pixi.sh/v0.39.5/schema/manifest/schema.json"

[project]
name = "jlpl"
version = "0.1.2"
channels = [
  "conda-forge",
  # "conda-forge/label/jupyterlite_core_alpha",
  # "conda-forge/label/jupyterlite_core_beta",
  "conda-forge/label/jupyterlite_core_rc",
  "conda-forge/label/jupyterlite_pyodide_kernel_beta",
]
platforms = ["linux-64", "osx-64", "win-64", "osx-arm64"]

[tasks]
# top-level tasks a la make phony
all = {cmd = "echo 🚢", description = """
🚢 ALL tasks to prepare for a release""", depends-on = [
  "fix",
  "lint",
  "build-pypi",
  "docs",
  "check",
  "test",
  "build",
]}
pr = {cmd = "echo 🧲", description = """
🧲 run ALL pull request preflight tasks""", depends-on = [
  "fix",
  "lint",
  "test-meta",
  "check",
]}
test = {cmd = "echo 🚀", description = """
🚀 run ALL tests""", depends-on = [
  "test-meta",
  "test-max",
  "test-min",
  "test-next",
]}
fix = {description = """
🧹 fix ALL source files""", cmd = "echo 🧹", depends-on = [
  "fix-tasks",
  "fix-deps",
  "fix-ruff",
  "fix-taplo",
  "fix-ipynb",
  "fix-prettier",
  "fix-mdlint",
]}
lint = {cmd = "echo ⭐", description = """
⭐ run ALL linters""", depends-on = [
  "lint-ruff",
  "lint-ipynb",
  "lint-actionlint",
  "lint-prettier",
  "lint-mdlint",
]}
build = {cmd = "echo 🏗️", description = """
🏗️  build ALL packages""", depends-on = [
  "build-pypi",
  "build-rattler",
  "build-hash",
]}
build-pypi = {cmd = "echo 🐍", description = """
🐍 build ALL PyPI distributions""", depends-on = [
  "build-pypi-core",
  "build-pypi-wd",
  "build-wheel",
  "build-twine",
]}
test-cli = {cmd = "echo 🚗", description = """
├ 🆘 check CLI in all test environments""", depends-on = [
  "test-min-cli",
  "test-max-cli",
  "test-next-cli",
]}
test-max = {cmd = "echo 🚗", description = """
├ 🚗 run tests in the default test environment""", depends-on = [
  "test-max-cli",
  "test-max-core",
  "test-max-wd",
]}
test-min = {cmd = "echo 🐎", description = """
├ 🐎 run tests in the oldest supported environment""", depends-on = [
  "test-min-cli",
  "test-min-core",
  "test-min-wd",
]}
test-next = {cmd = "echo 🛸", description = """
├ 🛸 run tests in the prerelease environment""", depends-on = [
  "test-next-cli",
  "test-next-core",
  "test-next-wd",
]}
docs = {cmd = "echo 🖨️", description = """
🖨️  build all documentation""", depends-on = ["docs-lite", "docs-sphinx"]}
check = {cmd = "echo 🤓", description = """
🤓 check all build/test artifacts""", depends-on = ["check-links", "check-spelling"]}

# tasks that are customized per env
pip-- = """rm -rf build/pip-freeze/$PIXI_ENVIRONMENT_NAME.txt
  && python -m pip install
    -vv
    --no-deps
    --no-build-isolation
    --disable-pip-version-check
    --ignore-installed"""
pip-check-- = """python -m pip check
  && mkdir -p build/pip-freeze
  && python -m pip list --format=freeze
  > build/pip-freeze/$PIXI_ENVIRONMENT_NAME.txt"""

pip-e-all-- = """
  pixi r pip-check--
  && pixi r pip--
    -e py/jupyterlite-pyodide-lock
    -e py/jupyterlite-pyodide-lock-webdriver
  && pixi r pip-check--
"""

pip-dist-- = "pixi r pip-- --find-links=dist --no-index"
pip-whl-all-- = """
  pixi r pip-check--
  && pixi r pip-dist--
    jupyterlite-pyodide-lock
    jupyterlite-pyodide-lock-webdriver
  && pixi r pip-check--
"""

# real tasks
[feature.tasks-lint.tasks.fix-deps]
description = "├ fix dependencies"
cmd = """
  python _scripts/fix-deps.py
    py/jupyterlite-pyodide-lock/pyproject.toml
    py/jupyterlite-pyodide-lock-webdriver/pyproject.toml"""
inputs = ["_scripts/fix-deps.py", "py/jupyterlite-pyodide-lock/pyproject.toml"]
outputs = [
  "py/*/pyproject.toml",
  "py/jupyterlite-pyodide-lock-webdriver/pyproject.toml",
]

[feature.tasks-lint.tasks.fix-tasks]
description = "├ fix pixi tasks"
cmd = "python _scripts/fix-tasks.py"
inputs = ["pixi.toml", "_scripts/fix-tasks.py"]

[feature.tasks-lint.tasks.fix-ipynb]
description = "├ fix notebooks"
cmd = "python _scripts/nb-lint.py --fix docs"
inputs = ["_scripts/nb-lint.py", "docs/**/*.ipynb", "!**/.*"]

[feature.tasks-lint.tasks.lint-ipynb]
description = "├ check notebooks"
cmd = "python _scripts/nb-lint.py docs"
inputs = ["_scripts/nb-lint.py", "docs/**/*.ipynb", "!**/.*"]

[feature.tasks-lint.tasks.fix-ruff]
description = "├ fix python with ruff"
cmd = "ruff check --fix-only && ruff format"
depends-on = ["fix-conftest"]
inputs = [
  "{_scripts,py,tests,docs,contrib}/**/*.{ipynb,py}",
  "pyproject.toml",
  "!**/.*",
]

[feature.tasks-lint.tasks.lint-ruff]
description = "├ check python with ruff"
cmd = "ruff check && ruff format --check"
inputs = [
  "{_scripts,py,tests,docs,contrib}/**/*.{ipynb,py}",
  "pyproject.toml",
  "!**/.*",
]

[feature.tasks-lint.tasks.fix-taplo]
description = "├ fix toml with taplo"
cmd = """
  taplo fmt
    --option=array_auto_collapse=false
    --option=array_auto_expand=true
    --option=compact_inline_tables=true
    --option=column_width=88
    --option=indent_string="  "
    pyproject.toml
    pixi.toml
    py/*/*.toml
    docs/*.toml"""
depends-on = ["fix-deps"]
inputs = ["*.toml", "{py,docs}/**/*.toml", "!**/.*"]

[feature.tasks-lint.tasks.fix-conftest]
description = "├ add templated conftest"
depends-on = ["fix-deps"]
inputs = [
  "py/jupyterlite-pyodide-lock/tests/conftest.py",
  "_scripts/replace-between.py",
]
outputs = ["py/jupyterlite-pyodide-lock-webdriver/tests/conftest.py"]
cmd = """
  python _scripts/replace-between.py
    py/jupyterlite-pyodide-lock/tests/conftest.py
    py/jupyterlite-pyodide-lock-webdriver/tests/conftest.py
    "# shared fixtures ###" """

[feature.tasks-lint.tasks.lint-actionlint]
description = "├ check GitHub actions with actionlint"
cmd = "actionlint -shellcheck=shellcheck -pyflakes=pyflakes"
inputs = [".github/workflows"]

[feature.tasks-lint.tasks.prettier--]
cmd = """prettier
  --config=_scripts/package.json
  --cache
  --cache-location=build/.cache/prettier
  "*.md"
  docs/.readthedocs.yaml
  "{.github,_scripts,docs,examples,py,recipe}/**/*.{yml,yaml,md,json}"
  """

[feature.tasks-lint.tasks.fix-prettier]
description = "├ format web-adjacent files with prettier"
cmd = "pixi r prettier-- --write --list-different"
inputs = [
  "*.md",
  ".github",
  "docs/.readthedocs.yaml",
  "{.github,_scripts,docs,examples,py,recipe}/**/*.{yml,md,json,css}",
]

[feature.tasks-lint.tasks.lint-prettier]
description = "├ check web-adjacent files with prettier"
cmd = "pixi r prettier-- --check"
inputs = [
  "*.md",
  "docs/.readthedocs.yaml",
  "{.github,_scripts,docs,examples,py,recipe}/**/*.{yml,md,json,css}",
]

[feature.tasks-lint.tasks.mdlint--]
cmd = """markdownlint-cli2
  --config _scripts/.markdownlint.yaml
  ".github/**/*.md"
  "_scripts/**/*.md"
  "docs/**/*.md"
  "examples/**/*.md"
  "py/**/*.md"
  "!**/.ipynb_checkpoints"
  *.md"""

[feature.tasks-lint.tasks.fix-mdlint]
description = "├ format markdown files with markdownlint2-cli"
cmd = "pixi r mdlint-- --fix"
depends-on = ["fix-prettier"]
inputs = [
  "*.md",
  "_scripts/.markdownlint.yaml",
  "{.github,_scripts,docs,examples,py}/**/*.md",
]

[feature.tasks-lint.tasks.lint-mdlint]
description = "├ check markdown files with markdownlint2-cli"
cmd = "pixi r mdlint--"
inputs = [
  "*.md",
  "_scripts/.markdownlint.yaml",
  "{.github,_scripts,docs,examples,py}/**/*.md",
]

# building #####################################################################
[feature.tasks-build.tasks.pyproject-build--]
cmd = """(cat .pixi/task-cache-v0/.skip-dist && exit 0)
  || mkdir -p dist
  && (rm -rf dist/$JLPL_BLD_GLOB || echo "nothing to delete")
  && cd py/$JLPL_BLD_PKG
  && rm -rf dist
  && pyproject-build . --no-isolation -vv
  && cp dist/* $PIXI_PROJECT_ROOT/dist"""

[feature.tasks-build.tasks.build-licenses]
description = "├ ensure licenses in contrib packages"
cmd = """
  cp LICENSE py/jupyterlite-pyodide-lock-webdriver/LICENSE
  && cp LICENSE py/jupyterlite-pyodide-lock/LICENSE
"""
inputs = ["LICENSE"]
outputs = ["py/*/LICENSE"]

[feature.tasks-build.tasks.build-pypi-core]
description = "├ build core PyPI distributions"
cmd = """export JLPL_BLD_PKG=jupyterlite-pyodide-lock
  && export JLPL_BLD_GLOB='jupyterlite_pyodide_lock-*'
  && pixi r pyproject-build--"""
inputs = [
  "py/jupyterlite-pyodide-lock/**/*.{py,toml,md,j2}",
  "!**/{.*,__pycache__,dist}",
]
outputs = ["dist/jupyterlite_pyodide_lock-*.{tar.gz,whl}"]

[feature.tasks-build.tasks.build-pypi-wd]
description = "├ build webdriver PyPI distributions"
cmd = """export JLPL_BLD_PKG=jupyterlite-pyodide-lock-webdriver
  && export JLPL_BLD_GLOB='jupyterlite_pyodide_lock_webdriver-*'
  && pixi r pyproject-build--"""
depends-on = ["build-licenses"]
inputs = [
  "py/jupyterlite-pyodide-lock-webdriver/**/*.{py,toml,md,j2}",
  "!**/{.*,__pycache__,dist}",
]
outputs = [
  "dist/jupyterlite_pyodide_lock_webdriver-*.{tar.gz,whl}",
]

[feature.tasks-build.tasks.build-rattler]
description = "├ build for conda distribution"
cmd = """
export JL_PL_GIT_DESCRIBE=0
&& rm -rf dist/noarch
&& mkdir -p build/rattler-build
&& rattler-build build
  --experimental
  --color=always
  --verbose
  --channel conda-forge
  --recipe recipe
  --output-dir build/rattler-build
&& cp -r build/rattler-build/noarch dist/noarch
"""
depends-on = ["build-pypi-wd", "build-pypi-core"]
inputs = ["dist/*.tar.gz", "recipe"]

[feature.tasks-build.tasks.build-twine]
description = "├ check the built distributions for PyPI"
cmd = "twine check --strict dist/*.whl dist/*.tar.gz"
depends-on = ["build-pypi-core", "build-pypi-wd"]
inputs = ["dist/"]

[feature.tasks-build.tasks.build-wheel]
description = "├ check the built wheel"
cmd = "check-wheel-contents dist/*.whl"
depends-on = ["build-pypi-core", "build-pypi-wd"]
inputs = ["dist/*.whl"]

[feature.tasks-build.tasks.build-hash]
description = "├ hash the built distributions"
cmd = """
rm -rf dist/SHA256SUMS
  && python -c 'from hashlib import sha256; from pathlib import Path; d = Path("dist"); [
    print(f"{sha256(p.read_bytes()).hexdigest()}  {p.relative_to(d).as_posix()}")
    for p in sorted(d.rglob("*"))
    if p.is_file() and p.name != "SHA256SUMS"
  ]'
  > dist/SHA256SUMS
  && cat dist/SHA256SUMS"""
depends-on = ["build-pypi-core", "build-pypi-wd", "build-rattler"]
inputs = ["dist", "!dist/SHA256SUMS"]
outputs = ["dist/SHA256SUMS"]

# testing patterns #############################################################
[tasks.pytest--]
cmd = """
  export JLPL_REPORT_ROOT=$PIXI_PROJECT_ROOT/build/reports
  && export JLPL_TEST_REPORTS=$JLPL_REPORT_ROOT/$PIXI_ENVIRONMENT_NAME/$JLPL_TEST_PKG
  && export COVERAGE_FILE=$JLPL_TEST_REPORTS/.coverage
  && export COVERAGE_RCFILE=$(pwd)/pyproject.toml
  && rm -rf $JLPL_TEST_REPORTS
  && mkdir -p $JLPL_TEST_REPORTS
  && cd $JLPL_TEST_CWD
  && pytest
    -o cache_dir=$PIXI_PROJECT_ROOT/build/.cache/$JLPL_TEST_PKG/pytest
    -vv
    -W error
    --rootdir .
    --color=yes
    --tb=long
    --cov-branch
    --cov-context=test
    --cov-report=html:$JLPL_TEST_REPORTS/htmlcov
    --cov-report=term-missing:skip-covered
    --cov=$JLPL_TEST_MOD
    --no-cov-on-fail
    --cov-fail-under=$JLPL_TEST_COV_FAIL_UNDER
    --html=$JLPL_TEST_REPORTS/pytest.html --self-contained-html
    -o generate_report_on_test=True
    tests
    || exit 1"""
[tasks.pytest-core--]
cmd = """export JLPL_TEST_PKG=jupyterlite-pyodide-lock
  && export JLPL_TEST_MOD=jupyterlite_pyodide_lock
  && export JLPL_TEST_CWD=py/jupyterlite-pyodide-lock
  && export JLPL_TEST_COV_FAIL_UNDER=100
  && pixi r pytest--"""
[tasks.pytest-wd--]
cmd = """export JLPL_TEST_PKG=jupyterlite-pyodide-lock-webdriver
  && export JLPL_TEST_MOD=jupyterlite_pyodide_lock_webdriver
  && export JLPL_TEST_CWD=py/jupyterlite-pyodide-lock-webdriver
  && export JLPL_TEST_COV_FAIL_UNDER=100
  && pixi r pytest--"""

# meta testing
[feature.tasks-test-repo.tasks.test-meta]
cmd = """
cd py/jupyterlite-pyodide-lock
&& pytest -k test_repo -vv
"""
depends-on = ["test-max-pip"]
inputs = [
  ".github",
  "CHANGELOG",
  "docs/form",
  "pixi.toml",
  "py/*/pyproject.toml",
  "py/jupyterlite-pyodide-lock/tests/test_repo.py",
]

# testing default ##############################################################
[feature.tasks-test-max.tasks.test-max-pip]
description = "├─ prepare the default test environment with pip"
cmd = "pixi r -e test-max pip-whl-all--"
depends-on = ["build-pypi-core", "build-pypi-wd"]
inputs = ["dist/*.whl"]
outputs = ["build/pip-freeze/test-max.txt"]

[feature.tasks-test-max.tasks.test-max-cli]
description = "├─ smoke test browsers in default test environment"
cmd = """jupyter-pyodide-lock browsers --check"""
depends-on = ["test-max-pip"]
inputs = ["build/pip-freeze/test-max.txt", "dist/*.whl"]

[feature.tasks-test-max.tasks.test-max-core]
description = "├─ test core in the default test environment"
cmd = "pixi r -e test-max pytest-core--"
depends-on = ["test-max-pip", "test-max-cli"]
inputs = ["py/jupyterlite-pyodide-lock/tests/**/*.py", "dist/*.whl"]
outputs = [
  "build/reports/test-max/jupyterlite-pyodide-lock/{pytest.html,htmlcov/status.json}",
]

[feature.tasks-test-max.tasks.test-max-wd]
description = "├─ test webdriver in the default test environment"
depends-on = ["test-max-pip", "test-max-cli"]
cmd = "pixi r -e test-max pytest-wd--"
inputs = [
  "py/jupyterlite-pyodide-lock-webdriver/pyproject.toml",
  "py/jupyterlite-pyodide-lock-webdriver/tests/**/*.py",
  "dist/*.whl",
]
outputs = [
  "build/reports/test-max/jupyterlite-pyodide-lock-webdriver/{pytest.html,htmlcov/status.json}",
]

# oldest supported testing #####################################################
[feature.tasks-test-min.tasks.test-min-pip]
description = "├─ prepare the min test environment with pip"
cmd = "pixi r -e test-min pip-whl-all--"
depends-on = ["build-pypi-core", "build-pypi-wd"]
inputs = ["dist/*.whl"]
outputs = ["build/pip-freeze/test-min.txt"]

[feature.tasks-test-min.tasks.test-min-cli]
description = "├─ smoke test browsers in min test environment"
cmd = "jupyter-pyodide-lock browsers --check"
depends-on = ["test-min-pip"]
inputs = ["build/pip-freeze/test-min.txt", "dist/*.whl"]

[feature.tasks-test-min.tasks.test-min-core]
description = "├─ test core in the min test environment"
cmd = "pixi r -e test-min pytest-core--"
depends-on = ["test-min-pip", "test-min-cli"]
inputs = ["py/jupyterlite-pyodide-lock/tests/**/*.py", "dist/*.whl"]
outputs = [
  "build/reports/test-min/jupyterlite-pyodide-lock/{pytest.html,htmlcov/status.json}",
]

[feature.tasks-test-min.tasks.test-min-wd]
description = "├─ test webdriver in the min test environment"
depends-on = ["test-min-pip", "test-min-cli"]
cmd = "pixi r -e test-min pytest-wd--"
inputs = [
  "py/jupyterlite-pyodide-lock-webdriver/pyproject.toml",
  "py/jupyterlite-pyodide-lock-webdriver/tests/**/*.py",
  "dist/*.whl",
]
outputs = [
  "build/reports/test-min/jupyterlite-pyodide-lock-webdriver/{pytest.html,htmlcov/status.json}",
]

# prerelease testing ###########################################################
[feature.tasks-test-next.tasks.test-next-pip]
description = "├─ prepare the next test environment with pip"
cmd = "pixi r -e test-next pip-whl-all--"
depends-on = ["build-pypi-core", "build-pypi-wd"]
inputs = ["dist/*.whl"]
outputs = ["build/pip-freeze/test-next.txt"]

[feature.tasks-test-next.tasks.test-next-cli]
description = "├─ smoke test browsers in next test environment"
cmd = "jupyter-pyodide-lock browsers --check"
depends-on = ["test-next-pip"]
inputs = ["build/pip-freeze/test-next.txt", "dist/*.whl"]

[feature.tasks-test-next.tasks.test-next-core]
description = "├─ test core in the next test environment"
cmd = "pixi r -e test-next pytest-core--"
depends-on = ["test-next-pip", "test-next-cli"]
inputs = ["py/jupyterlite-pyodide-lock/tests/**/*.py", "dist/*.whl"]
outputs = [
  "build/reports/test-next/jupyterlite-pyodide-lock/{pytest.html,htmlcov/status.json}",
]

[feature.tasks-test-next.tasks.test-next-wd]
description = "├─ test webdriver in the next test environment"
depends-on = ["test-next-pip", "test-next-cli"]
cmd = "pixi r -e test-next pytest-wd--"
inputs = [
  "py/jupyterlite-pyodide-lock-webdriver/pyproject.toml",
  "py/jupyterlite-pyodide-lock-webdriver/tests/**/*.py",
  "dist/*.whl",
]
outputs = [
  "build/reports/test-next/jupyterlite-pyodide-lock-webdriver/{pytest.html,htmlcov/status.json}",
]

# docs #########################################################################
[feature.tasks-docs.tasks.docs-pip]
description = "├ prepare the docs environment with pip"
cmd = "pixi r -e docs pip-whl-all--"
depends-on = ["build-pypi"]
inputs = ["dist/*.whl"]
outputs = ["build/pip-freeze/docs.txt"]

[feature.tasks-docs.tasks.docs-scour]
description = "├ optimize SVG for docs with scour"
cmd = """export SCOUR_ARGS="scour --enable-id-stripping --enable-comment-stripping"
  && cd docs/_static
  && $SCOUR_ARGS icon-inkscape.svg icon.svg"""
inputs = ["docs/_static/*-inkscape.svg"]
outputs = ["docs/_static/*.svg", "docs/_static/*.svg", "!*inkscape.svg"]


[feature.tasks-docs.tasks.docs-lite]
description = "├ build a demo site with jupyter-lite"
cmd = """cd examples
  && jupyter-lite doit --debug -- pre_archive:report:SHA256SUMS"""
depends-on = ["docs-pip"]
inputs = ["examples", "py/**/*.py", "!**/.*"]
outputs = ["build/docs-app/SHA256SUMS"]

[feature.tasks-docs.tasks.docs-sphinx]
description = "├ build documentation with sphinx"
cmd = """rm -rf build/docs
  && cd docs
  && export PYDEVD_DISABLE_FILE_VALIDATION=1
  && sphinx-build -W --keep-going --color -b html . ../build/docs"""
depends-on = ["docs-lite", "docs-scour"]
inputs = [
  "*.md",
  "pixi.toml",
  "py/*/*.toml",
  "py/*/src/**/*.py",
  "build/docs-app/SHA256SUMS",
  "dist/*.whl",
  "docs/**/*.{css,ipynb,md,py,toml}",
  "!**/.*",
  "!**/{__pycache__,vale}",
]
outputs = ["build/docs/.buildinfo"]

[feature.tasks-docs.tasks.docs-rtd]
description = "├ copy the documentation site to where ReadTheDocs wants it"
cmd = """python -c "
import os;
assert all(map(os.getenv, ['READTHEDOCS', 'READTHEDOCS_OUTPUT'])), 'not on ReadTheDocs'
"
  && rm -rf "$READTHEDOCS_OUTPUT/html"
  && mkdir -p "$READTHEDOCS_OUTPUT"
  && cp -r build/docs "$READTHEDOCS_OUTPUT/html"
  && ls -lathr "$READTHEDOCS_OUTPUT/html"
"""

# checking
[feature.tasks-check.tasks.check-links]
description = "├ check links in html"
cmd = """
  rm -rf build/reports/check-links
  && mkdir -p build/reports/check-links
  && cd build/reports/check-links
  && touch pytest.ini
  && pytest
    -c pytest.ini
    --rootdir=.
    -p no:importnb
    --check-links
    --check-links-ignore '^https?://'
    -k "not _modules/index.html"
    ../../docs/**/*.html
"""
depends-on = ["docs-sphinx"]
inputs = ["build/docs/**/*.html"]

[feature.tasks-check.tasks.check-spelling]
description = "├ check spelling in documentation"
cmd = "python _scripts/vale/check.py"
depends-on = ["docs-sphinx"]
inputs = [
  "build/docs/**/*.html",
  "_scripts/vale",
  "{py,_scripts,atest}/**/*.py",
  "!**/.*",
]
outputs = ["build/reports/vale.html"]

# interactive development ######################################################
[feature.tasks-dev.tasks.dev-pip]
description = "├ prepare the dev environment"
cmd = """pixi r -e dev pip-e-all--"""
outputs = ["build/pip-freeze/dev.txt"]

[feature.tasks-dev.tasks.dev-lab]
description = "├ 🔁 serve JupyterLab in the dev environment"
cmd = """jupyter lab --no-browser --debug"""
depends-on = ["dev-pip"]

[feature.tasks-dev.tasks.dev-docs]
description = "├ 🔁 watch and serve the documentation with autoreload"
cmd = """sphinx-autobuild -b html docs build/dev-docs
    --write-all
    --color
    --watch README.md
    --watch pixi.toml
    --watch pyproject.toml
    --watch build/docs-app
    --watch py/jupyterlite-pyodide-lock/src
    --watch py/jupyterlite-pyodide-lock-webdriver/src
"""
depends-on = ["dev-pip", "docs-sphinx"]

# dependencies #################################################################
[feature.deps-run.dependencies]
jupyterlite-core = ">=0.3.0,<0.6.0"
jupyterlite-pyodide-kernel = ">=0.3.1,<0.6.0"
psutil = ">=6"
pyodide-lock = ">=0.1.0a4,<0.1.0b0"
pyodide-lock-with-wheel = "*"
python = ">=3.10,<3.14"
tornado = ">=6.1.0"

[feature.deps-run-min.dependencies]
jupyterlite-core = "0.3.0"
jupyterlite-pyodide-kernel = "0.3.1"
psutil = "6.0.*"
pyodide-lock = "0.1.0a4"
python = "3.10.*"

[feature.deps-run-max.dependencies]
python = "3.13.*"
pyodide-lock = "0.1.0a8"
jupyterlite-core = "0.4.*"
jupyterlite-pyodide-kernel = "0.4.*"

[feature.deps-run-next.dependencies]
python = "3.13.*"
pyodide-lock = "0.1.0a6"

[feature.deps-run-next.dependencies.jupyterlite-core]
version = ">=0.5.0rc0"
channel = "conda-forge/label/jupyterlite_core_rc"

[feature.deps-run-next.dependencies.jupyterlite-pyodide-kernel]
version = ">=0.5.0b0"
channel = "conda-forge/label/jupyterlite_pyodide_kernel_beta"

[feature.deps-pip.dependencies]
pip = "*"
flit-core = ">=3.9,<4.0"

[feature.deps-build.dependencies]
python-build = "*"
flit-core = ">=3.9,<4.0"
check-wheel-contents = "*"
twine = "*"
rattler-build = "*"

[feature.deps-lint.dependencies]
actionlint-with-all = "*"
markdownlint-cli2 = "*"
nbformat = "*"
prettier = "*"
ruff = "*"
taplo = "*"
tomli-w = "*"
tomlkit = "*"
types-psutil = "*"

[feature.deps-test.dependencies]
pytest = ">=8,<9"
pytest-cov = "*"
pytest-html = "*"
jupyter_server = "*"

[feature.deps-webdriver.dependencies]
selenium = ">=4.19"

[feature.deps-webdriver-min.dependencies]
selenium = "4.19.*"

[feature.deps-firefox.dependencies]
firefox = "*"
geckodriver = "*"

[feature.deps-firefox-min.dependencies]
firefox = "128.*"

[feature.deps-docs.dependencies]
autodoc-traits = ">=1.2.2"
importnb = "*"
jinja2 = ">=2.9"
myst-nb = "*"
packaging = "*"
pydata-sphinx-theme = "*"
pypandoc = "*"
python-libarchive-c = "*"
requests = "*"
scour = "*"
sphinx = "*"
sphinx-autodoc-typehints = "*"
sphinx-copybutton = "*"

[feature.deps-check.dependencies]
pytest-check-links = "*"
vale = "*"
vale-spelling-aoo-mozilla-en-dict-us = "*"

[feature.deps-dev.dependencies]
sphinx-autobuild = "*"
watchfiles = "*"

[feature.deps-demo.dependencies]
ipywidgets = ">=8.1,<8.2"
jupyterlab = ">=4.1,<4.4"

# environments #################################################################
[environments]
lint = {features = ["deps-lint", "tasks-lint"]}
build = {features = ["deps-build", "tasks-build"]}
docs = {features = [
  "deps-build",
  "deps-check",
  "deps-demo",
  "deps-docs",
  "deps-firefox",
  "deps-pip",
  "deps-run",
  "deps-webdriver",
  "tasks-check",
  "tasks-docs",
]}
test-max = {features = [
  "deps-firefox",
  "deps-pip",
  "deps-run-max",
  "deps-run",
  "deps-test",
  "deps-webdriver",
  "tasks-test-repo",
  "tasks-test-max",
]}
test-min = {features = [
  "deps-firefox-min",
  "deps-firefox",
  "deps-pip",
  "deps-run-min",
  "deps-run",
  "deps-test",
  "deps-webdriver-min",
  "deps-webdriver",
  "tasks-test-min",
]}
test-next = {features = [
  "deps-firefox",
  "deps-pip",
  "deps-run-next",
  "deps-run",
  "deps-test",
  "deps-webdriver",
  "tasks-test-next",
]}
dev = {features = [
  "deps-build",
  "deps-demo",
  "deps-dev",
  "deps-docs",
  "deps-lint",
  "deps-pip",
  "deps-run",
  "deps-test",
  "deps-webdriver",
  "tasks-dev",
]}
